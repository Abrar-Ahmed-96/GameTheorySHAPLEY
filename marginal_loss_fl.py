# -*- coding: utf-8 -*-
"""marginal-loss-fl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZuRXXjSA4G8WwqyAAbvQawELG88BEukP
"""

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical
import numpy as np

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Define the model architecture
model = Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(10, activation='softmax')
])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32
server_optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Define the training and evaluation functions for the clients and the server
def client_train(client_model, dataset, client_optimizer):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    for x, y in dataset:
        with tf.GradientTape() as tape:
            logits = client_model(x, training=True)
            loss = loss_fn(y, logits)
        gradients = tape.gradient(loss, client_model.trainable_weights)
        client_optimizer.apply_gradients(zip(gradients, client_model.trainable_weights))
    return client_model.trainable_weights

def client_evaluate(client_model, dataset):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    loss, accuracy = 0.0, 0.0
    for x, y in dataset:
        logits = client_model(x, training=False)
        loss += loss_fn(y, logits)
        accuracy += tf.reduce_sum(tf.cast(tf.equal(tf.argmax(logits, axis=-1), tf.argmax(y, axis=-1)), tf.float32))
    loss /= len(dataset)
    accuracy /= len(dataset) * client_batch_size
    return loss, accuracy

def server_aggregate(weights):
    return [tf.reduce_mean([w[i] for w in weights], axis=0) for i in range(len(weights[0]))]

def server_evaluate(server_model, dataset):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    loss, accuracy = 0.0, 0.0
    for x, y in dataset:
        logits = server_model(x, training=False)
        loss += loss_fn(y, logits)
        accuracy += tf.reduce_sum(tf.cast(tf.equal(tf.argmax(logits, axis=-1), tf.argmax(y, axis=-1)), tf.float32))
    loss /= len(dataset)
    accuracy /= len(dataset) * client_batch_size * num_clients
    return loss, accuracy

# Train the model using federated learning
for round in range(10):
    print('Round:', round+1)
    client_weights = []
    for i in range(num_clients):
        client_model = tf.keras.models.clone_model(model)
        client_model.compile(loss=tf.keras.losses.CategoricalCrossentropy())

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

model = Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(10, activation='softmax')
])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32
server_optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Define the training and evaluation functions for the clients and the server
def client_train(client_model, dataset, client_optimizer):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    for x, y in dataset:
        with tf.GradientTape() as tape:
            logits = client_model(x, training=True)
            loss = loss_fn(y, logits)
        gradients = tape.gradient(loss, client_model.trainable_weights)
        client_optimizer.apply_gradients(zip(gradients, client_model.trainable_weights))
    return client_model.trainable_weights

def client_evaluate(client_model, dataset):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    loss, accuracy = 0.0, 0.0
    for x, y in dataset:
        logits = client_model(x, training=False)
        loss += loss_fn(y, logits)
        accuracy += tf.reduce_sum(tf.cast(tf.equal(tf.argmax(logits, axis=-1), tf.argmax(y, axis=-1)), tf.float32))
    loss /= len(dataset)
    accuracy /= len(dataset) * client_batch_size
    return loss, accuracy

def server_aggregate(weights):
    return [tf.reduce_mean([w[i] for w in weights], axis=0) for i in range(len(weights[0]))]

def server_evaluate(server_model, dataset):
    loss_fn = tf.keras.losses.CategoricalCrossentropy()
    loss, accuracy = 0.0, 0.0
    for x, y in dataset:
        logits = server_model(x, training=False)
        loss += loss_fn(y, logits)
        accuracy += tf.reduce_sum(tf.cast(tf.equal(tf.argmax(logits, axis=-1), tf.argmax(y, axis=-1)), tf.float32))
    loss /= len(dataset)
    accuracy /= len(dataset) * client_batch_size * num_clients
    return loss, accuracy

# Train the model using federated learning
train_loss_results = []
train_accuracy_results = []
test_loss_results = []
test_accuracy_results = []

for round in range(10):
    print('Round:', round+1)
    client_weights = []
    for i in range(num_clients):
        client_model = tf.keras.models.clone_model(model)
        client_model.compile(loss=tf.keras.losses.CategoricalCrossentropy())

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train each client model and calculate the marginal loss on the global model
for i in range(num_clients):
    # Clone the global model to create the client model
    client_model = tf.keras.models.clone_model(global_model)
    client_model.set_weights(global_model.get_weights())

    # Train the client model on its respective dataset
    client_model.compile(optimizer='adam',
                          loss='categorical_crossentropy',
                          metrics=['accuracy'])
    client_model.fit(clients[i], epochs=1, batch_size=client_batch_size)

    # Evaluate the loss of the global model on the client model
    global_loss_without_client = global_model.evaluate(clients[i], batch_size=client_batch_size, verbose=0)[0]
    client_weights = client_model.get_weights()
    global_model.set_weights(client_weights)
    global_loss_with_client = global_model.evaluate(clients[i], batch_size=client_batch_size, verbose=0)[0]
    global_model.set_weights(global_model.get_weights())

    # Calculate the marginal loss of the client model on the global model
    marginal_loss = global_loss_with_client - global_loss_without_client

    print(f"Client {i + 1} marginal loss: {marginal_loss}")

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train each client model and calculate the marginal loss on the global model
for i in range(num_clients):
    # Clone the global model to create the client model
    client_model = tf.keras.models.clone_model(global_model)
    client_model.set_weights(global_model.get_weights())

    # Train the client model on its respective dataset
    client_model.compile(optimizer='adam',
                          loss='categorical_crossentropy',
                          metrics=['accuracy'])
    client_model.fit(clients[i], epochs=1, batch_size=client_batch_size)

    # Evaluate the loss of the global model on the validation dataset
    global_loss_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)[0]
    client_weights = client_model.get_weights()
    global_model.set_weights(client_weights)
    global_loss_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)[0]
    global_model.set_weights(global_model.get_weights())

    # Calculate the marginal loss of the client model on the global model
    marginal_loss = global_loss_with_client - global_loss_without_client

    print(f"Client {i + 1} marginal loss: {marginal_loss}")

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train each client model and calculate the marginal loss on the global model
for i in range(num_clients):
    # Clone the global model to create the client model
    client_model = tf.keras.models.clone_model(global_model)
    client_model.set_weights(global_model.get_weights())

    # Train the client model on its respective dataset
    client_model.compile(optimizer='adam',
                          loss='categorical_crossentropy',
                          metrics=['accuracy'])
    client_model.fit(clients[i], epochs=1, batch_size=client_batch_size)

    # Evaluate the loss and accuracy of the global model on the validation dataset
    global_loss_without_client, global_acc_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
    client_weights = client_model.get_weights()
    global_model.set_weights(client_weights)
    global_loss_with_client, global_acc_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
    global_model.set_weights(global_model.get_weights())

    # Calculate the marginal loss and print the results
    marginal_loss = global_loss_with_client - global_loss_without_client
    print(f"Client {i + 1} marginal loss: {marginal_loss}")
    if marginal_loss > -0.01:
        print(f"Client {i + 1} marginal loss: {marginal_loss}")
    
# Evaluate the test accuracy of the global model
test_loss, test_acc = global_model.evaluate(x_test, y_test)
print(f"Test accuracy: {test_acc}")

"""in each round

cifar
"""

import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

x_train = x_train.reshape((-1, 32, 32, 3)) / 255.0
x_test = x_test.reshape((-1, 32, 32, 3)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(32, 32, 3)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train each client model and calculate the marginal loss on the global model
for i in range(num_clients):
    # Clone the global model to create the client model
    client_model = tf.keras.models.clone_model(global_model)
    client_model.set_weights(global_model.get_weights())

    # Train the client model on its respective dataset
    client_model.compile(optimizer='adam',
                          loss='categorical_crossentropy',
                          metrics=['accuracy'])
    client_model.fit(clients[i], epochs=1, batch_size=client_batch_size)

    # Evaluate the loss and accuracy of the global model on the validation dataset
    global_loss_without_client, global_acc_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
    client_weights = client_model.get_weights()
    global_model.set_weights(client_weights)
    global_loss_with_client, global_acc_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
    global_model.set_weights(global_model.get_weights())

    # Calculate the marginal loss and print the results
    marginal_loss = global_loss_with_client - global_loss_without_client
    print(f"Client {i + 1} marginal loss: {marginal_loss}")
    if marginal_loss > -0.01:
        print(f"Client {i + 1} marginal loss: {marginal_loss}")
    
# Evaluate the test accuracy of the global model
test_loss, test_acc = global_model.evaluate(x_test, y_test)
print(f"Test accuracy: {test_acc}")



import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
client_batch_size = 32
num_rounds = 5

# Split the dataset into clients
client_data = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train) // num_clients)
clients = [client_data.shard(num_clients, i) for i in range(num_clients)]

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train the global model using federated learning
for r in range(num_rounds):
    print(f"Round {r + 1}")
    for i in range(num_clients):
        # Clone the global model to create the client model
        client_model = tf.keras.models.clone_model(global_model)
        client_model.set_weights(global_model.get_weights())

        # Train the client model on its respective dataset
        client_model.compile(optimizer='adam',
                              loss='categorical_crossentropy',
                              metrics=['accuracy'])
        client_model.fit(clients[i], epochs=1, batch_size=client_batch_size)

        # Evaluate the loss and accuracy of the global model on the validation dataset
        global_loss_without_client, global_acc_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        client_weights = client_model.get_weights()
        global_model.set_weights(client_weights)
        global_loss_with_client, global_acc_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        global_model.set_weights(global_model.get_weights())

        # Calculate the marginal loss and print the results
        marginal_loss = global_loss_with_client - global_loss_without_client
        print(f"Client {i + 1} marginal loss: {marginal_loss}")
        if marginal_loss > -0.01:
          print(f"Client {i + 1} selected aggregation {marginal_loss}")

"""in each round: imbalance"""

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
num_samples_per_client = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]
client_batch_size = 32
num_rounds = 5

marginal_loss_threshold = -0.01
passcount = 0

# Split the dataset into clients
client_data = []
start = 0
for i in range(num_clients):
    end = start + num_samples_per_client[i]
    client_data.append(tf.data.Dataset.from_tensor_slices((x_train[start:end], y_train[start:end])).batch(client_batch_size))
    start = end

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train the global model using federated learning
for r in range(num_rounds):
    print(f"Round {r + 1}")
    for i in range(num_clients):
        # Clone the global model to create the client model
        client_model = tf.keras.models.clone_model(global_model)
        client_model.set_weights(global_model.get_weights())

        # Train the client model on its respective dataset
        client_model.compile(optimizer='adam',
                              loss='categorical_crossentropy',
                              metrics=['accuracy'])
        client_model.fit(client_data[i], epochs=1)

        # Evaluate the loss and accuracy of the global model on the validation dataset
        global_loss_without_client, global_acc_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        client_weights = client_model.get_weights()
        global_model.set_weights(client_weights)
        global_loss_with_client, global_acc_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        global_model.set_weights(global_model.get_weights())

        # Calculate the marginal loss and print the results
        marginal_loss = global_loss_with_client - global_loss_without_client
        print(f"Client {i + 1} marginal loss: {marginal_loss}")
        if marginal_loss > -0.01:
          print(f"Client {i + 1} selected aggregation {marginal_loss}")
          passcount += 1  
          print("Number of clients with marginal loss greater than -0.01: ", passcount)

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((-1, 28, 28, 1)) / 255.0
x_test = x_test.reshape((-1, 28, 28, 1)) / 255.0
y_train = tf.keras.utils.to_categorical(y_train)
y_test = tf.keras.utils.to_categorical(y_test)

# Define the model architecture
global_model = Sequential([
    Flatten(input_shape=(28, 28, 1)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the global model
global_model.compile(optimizer='adam',
                      loss='categorical_crossentropy',
                      metrics=['accuracy'])

# Define the federated learning setup
num_clients = 10
num_samples_per_client = [50, 100, 150, 200, 250, 300, 350, 400, 450, 500]
client_batch_size = 32
num_rounds = 5

# Split the dataset into clients
client_data = []
start = 0
for i in range(num_clients):
    end = start + num_samples_per_client[i]
    client_data.append(tf.data.Dataset.from_tensor_slices((x_train[start:end], y_train[start:end])).batch(client_batch_size))
    start = end

# Train the global model on the entire dataset
global_model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Train the global model using federated learning
for r in range(num_rounds):
    print(f"Round {r + 1}")
    for i in range(num_clients):
        # Clone the global model to create the client model
        client_model = tf.keras.models.clone_model(global_model)
        client_model.set_weights(global_model.get_weights())

        # Train the client model on its respective dataset
        client_model.compile(optimizer='adam',
                              loss='categorical_crossentropy',
                              metrics=['accuracy'])
        client_model.fit(client_data[i], epochs=1)

        # Evaluate the loss and accuracy of the global model on the validation dataset
        global_loss_without_client, global_acc_without_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        client_weights = client_model.get_weights()
        global_model.set_weights(client_weights)
        global_loss_with_client, global_acc_with_client = global_model.evaluate(x_test, y_test, batch_size=client_batch_size, verbose=0)
        global_model.set_weights(global_model.get_weights())

        # Calculate the marginal loss and print the results
        marginal_loss = global_loss_with_client - global_loss_without_client
        print(f"Client {i + 1} marginal loss: {marginal_loss}")
        if marginal_loss > -0.01:
          print(f"Client {i + 1} selected aggregation {marginal_loss}")

import tensorflow as tf
from tensorflow import keras
import numpy as np

# Set up MNIST data
mnist = keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((train_images.shape[0], 28, 28, 1)) / 255.0
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1)) / 255.0
val_data = (test_images, test_labels)

# Set up clients and data
num_clients = 10
client_datasets = []
client_sizes = [50 * (i+1) for i in range(num_clients)]
for i in range(num_clients):
    start = sum(client_sizes[:i])
    end = start + client_sizes[i]
    data = (train_images[start:end], train_labels[start:end])
    client_datasets.append(data)

# Set up model and client models
global_model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(10, activation='softmax')
])
global_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

num_rounds = 5
num_epochs = 5
marginal_loss_sum = np.zeros(num_clients)
marginal_loss_threshold = -0.01
count = 0

client_models = []
for i in range(num_clients):
    client_model = keras.Sequential([
        keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
        keras.layers.MaxPooling2D((2, 2)),
        keras.layers.Flatten(),
        keras.layers.Dense(10, activation='softmax')
    ])
    client_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    client_models.append(client_model)

for r in range(num_rounds):
    print("Round: {}/{}".format(r+1, num_rounds))
    
# Evaluate global model on validation set
def evaluate_global_model_on_validation_data():
    global_model.set_weights(initial_weights)
    val_accuracy = tf.keras.metrics.SparseCategoricalAccuracy()
    for (x_batch_val, y_batch_val) in val_dataset:
        preds = global_model(x_batch_val)
        val_accuracy.update_state(y_batch_val, preds)
    return val_accuracy.result().numpy()
    
    # Train client models
    for c in range(num_clients):
        client_model = client_models[c]
        client_data = client_datasets[c]
        client_model.set_weights(global_model.get_weights())
        client_model.fit(client_data, epochs=num_epochs, verbose=0)
        
        # Evaluate client model on validation set and calculate marginal loss
        client_loss, _ = client_model.evaluate(val_data, verbose=0)
        global_loss, _ = global_model.evaluate(val_data, verbose=0)
        marginal_loss = client_loss - global_loss
        
        # Print marginal loss for current client and round
        print("Client: {}/{}, Round: {}/{}, Marginal Loss: {}".format(c+1, num_clients, r+1, num_rounds, marginal_loss))
        
        # Add marginal loss to sum for current client
        marginal_loss_sum[c] += marginal_loss
        
        # Check if marginal loss is greater than threshold
        if marginal_loss > marginal_loss_threshold:
            count += 1
            
    # Aggregate client models into global model
    aggregate_client_models(global_model, client_models)

print("Number of clients with marginal loss greater than -0.01: ", count)



import tensorflow as tf
import numpy as np
import random

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize pixel values
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Define model architecture
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile model
model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Define function to create batches of data for each client
def create_client_batches(data, labels, num_clients):
    client_data = []
    client_labels = []
    batch_size = len(data) // num_clients
    for i in range(num_clients):
        client_data.append(data[i * batch_size:(i + 1) * batch_size])
        client_labels.append(labels[i * batch_size:(i + 1) * batch_size])
    return client_data, client_labels

# Define number of clients and epochs
num_clients = 20
num_epochs = 10

# Split data and labels into batches for each client
client_data, client_labels = create_client_batches(x_train, y_train, num_clients)

# Train model on each client's data for num_epochs epochs
for i in range(num_clients):
    print("Training on client", i)
    model.fit(client_data[i], client_labels[i], epochs=num_epochs)
    client_loss, client_accuracy = model.evaluate(client_data[i], client_labels[i], verbose=0)
    model.fit(np.concatenate(client_data[:i]+client_data[i+1:]), 
              np.concatenate(client_labels[:i]+client_labels[i+1:]), 
              epochs=num_epochs)
    no_client_loss, no_client_accuracy = model.evaluate(client_data[i], client_labels[i], verbose=0)
    marginal_loss = no_client_loss - client_loss
    print("Client", i, "Marginal Loss:", marginal_loss)

# Evaluate model on validation set
val_loss, val_accuracy = model.evaluate(x_test, y_test, verbose=0)
m=0
# Evaluate model on validation set without each client's data and calculate marginal loss on validation set
for i in range(num_clients):
    m[i]=0
    val_loss_with_client, val_accuracy_with_client = model.evaluate(x_test, y_test, verbose=0)
    model.fit(np.concatenate(client_data[:i]+client_data[i+1:]), 
              np.concatenate(client_labels[:i]+client_labels[i+1:]), 
              epochs=num_epochs)
    val_loss_without_client, val_accuracy_without_client = model.evaluate(x_test, y_test, verbose=0)
    marginal_loss_on_val = val_loss_without_client - val_loss_with_client
    m[i]+=marginal_loss_on_val
    print("Client", i, "Marginal Loss on Validation Set:", marginal_loss_on_val)
    print("Client", i, "Marginal Loss on Validation Set:", m)

import tensorflow as tf
import numpy as np
import random

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize pixel values
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Define model architecture
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile model
model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Define function to create batches of data for each client
def create_client_batches(data, labels, num_clients):
    client_data = []
    client_labels = []
    batch_size = len(data) // num_clients
    for i in range(num_clients):
        client_data.append(data[i * batch_size:(i + 1) * batch_size])
        client_labels.append(labels[i * batch_size:(i + 1) * batch_size])
    return client_data, client_labels

# Define number of clients and epochs
num_clients = 10
num_epochs = 5

# Split data and labels into batches for each client
client_data, client_labels = create_client_batches(x_train, y_train, num_clients)

# Train model on each client's data for num_epochs epochs
for i in range(num_clients):
    print("Training on client", i)
    model.fit(client_data[i], client_labels[i], epochs=num_epochs)
    client_loss, client_accuracy = model.evaluate(client_data[i], client_labels[i], verbose=0)
    model.fit(np.concatenate(client_data[:i]+client_data[i+1:]), 
              np.concatenate(client_labels[:i]+client_labels[i+1:]), 
              epochs=num_epochs)
    no_client_loss, no_client_accuracy = model.evaluate(client_data[i], client_labels[i], verbose=0)
    marginal_loss = no_client_loss - client_loss
    print("Client", i, "Marginal Loss:", marginal_loss)

# Evaluate model on validation set
val_loss, val_accuracy = model.evaluate(x_test, y_test, verbose=0)

# Evaluate model on validation set without each client's data and calculate marginal loss on validation set
for i in range(num_clients):
    val_loss_with_client, val_accuracy_with_client = model.evaluate(x_test, y_test, verbose=0)
    model.fit(np.concatenate(client_data[:i]+client_data[i+1:]), 
              np.concatenate(client_labels[:i]+client_labels[i+1:]), 
              epochs=num_epochs)
    val_loss_without_client, val_accuracy_without_client = model.evaluate(x_test, y_test, verbose=0)
    marginal_loss_on_val = val_loss_without_client - val_loss_with_client
     
    print("Client", i, "Marginal Loss on Validation Set:", marginal_loss_on_val)
    if marginal_loss > -0.01:
          print(f"Client {i + 1} selected aggregation {marginal_loss}")
    w=marginal_loss_on_val[i]/marginal_loss_on_val[i+1]
# Evaluate model on test set
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=0)
print("Test Accuracy:", test_accuracy)