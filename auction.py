# -*- coding: utf-8 -*-
"""auction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AD_DjDjalu10VWmUVxwaORmWtXmgbdyz
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models

# Define the reverse auction function
def reverse_auction(bid_prices, num_selected):
    sorted_clients = sorted(range(len(bid_prices)), key=lambda i: bid_prices[i])
    selected_clients = sorted_clients[:num_selected]
    return selected_clients

# Load MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1, 28, 28, 1) / 255.0
x_test = x_test.reshape(-1, 28, 28, 1) / 255.0

# Define the model architecture
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Define the number of clients and the number of clients to select
num_clients = 20
num_selected_clients = 5

# Initialize the bid prices for the clients in the range from 5 to 15
bid_prices = np.random.uniform(low=5.0, high=15.0, size=num_clients)

# Set the server budget
server_budget = 100.0

# Perform federated learning for 10 rounds
for round in range(10):
    print(f"\nRound {round+1}/10")
    
    # Select clients based on reverse auction
    selected_clients = reverse_auction(bid_prices, num_selected_clients)
    
    print("Selected Clients and Their Bid Prices:")
    for client_id in selected_clients:
        print(f"Client {client_id+1} - Bid Price: {bid_prices[client_id]}")
    
    for client_id in selected_clients:
        print(f"\nTraining client {client_id+1}")
        
        # Get client data
        client_x_train = x_train[client_id * 3000 : (client_id+1) * 3000]
        client_y_train = y_train[client_id * 3000 : (client_id+1) * 3000]
        
        # Train the model on client data
        model.fit(client_x_train, client_y_train, epochs=1, verbose=0)
        
        # Evaluate the model on client data
        _, accuracy = model.evaluate(client_x_train, client_y_train, verbose=0)
        print(f"Accuracy on client {client_id+1}: {accuracy}")
    
    print(f"\nSelected clients for Round {round+1}: {selected_clients}")

# Calculate surplus by subtracting selected bid prices from the server budget
surplus = server_budget - np.sum(bid_prices[selected_clients])

print(f"\nSurplus: {surplus}")